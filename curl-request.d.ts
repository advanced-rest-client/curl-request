/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   curl-request.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />

declare namespace LogicElements {

  /**
   * `curl-request`
   *
   * A component that transforms cURL command to ARC request object.
   */
  class CurlRequest extends Polymer.Element {

    /**
     * Contains mapping of short option notation to long name.
     */
    readonly optionsMap: object|null;
    readonly voidOptions: Array<String|null>|null;
    command: string|null|undefined;
    readonly request: object|null|undefined;

    /**
     * Generates the value for `request` when `command` change.
     * This function sets value for rhe `request` property.
     *
     * @param value cURL command value
     */
    _autoGen(value: String|null): void;

    /**
     * Generates ARC request object from cURL command.
     *
     * @param value cURL command value.
     * @returns ARC request object
     */
    generate(value: String|null): object|null;

    /**
     * Prepares command value. Removes any of `$ curl` from the command so
     * the remaining is command arguments.
     * This throws error if the command is not a valid cURL comamnd (eg. doesn't
     * contain "curl" prefix).
     *
     * @param value Command passed to `generate()` function.
     * @returns Command arguments
     */
    _prepareCommand(value: String|null): String|null;

    /**
     * Reads command as a list of options.
     *
     * @param value Passed command
     * @returns An object containing `url` as a string property and
     * `options` as an array of object where each item has `name` and `value`
     * properties. The `value` property can be undefined.
     */
    _prepareOptions(value: String|null): object|null;

    /**
     * Creates a cannonical form of options. Replaces shortcut options with it's
     * full name. Removes values from void options.
     *
     * @param opts Parsed options.
     * @returns Processed options.
     */
    _canonicalOptions(opts: Array<object|null>|null): Array<object|null>|null;

    /**
     * Processes recognized options.
     *
     * @param options List of parsed options
     * @param target Request object
     */
    _processOptions(options: Array<object|null>|null, target: object|null): void;

    /**
     * Operations to perform when options has been parsed and set on the request.
     *
     * @param request ARC request object
     */
    _postProcess(request: object|null): void;

    /**
     * Applies an option to the request object.
     *
     * @param item Option with `name` and `value` properties.
     * @param target ARC request object.
     */
    _addOption(item: object|null, target: object|null): void;

    /**
     * Processes user input string. It can be just a username or `username:password`
     *
     * @param value A value to parse
     * @returns Object with `username` and optional `password` properties.
     */
    _processUser(value: String|null): object|null;

    /**
     * Adds additional property to `auth` object.
     *
     * @param target ARC request
     * @param name Name of the proeprty
     * @param value Value to pass.
     */
    _addAuthProperty(target: String|null, name: String|null, value: any|null): void;

    /**
     * Appends header from the header string.
     *
     * @param headers List of headers in the request object
     * @param value Header value to be parsed.
     */
    _appendHeaderString(headers: any[]|null, value: String|null): void;

    /**
     * Removes a header from the list.
     *
     * @param headers List of headers in the request object
     * @param name Header name
     */
    _removeHeader(headers: any[]|null, name: String|null): void;

    /**
     * Adds/replaces value of the header.
     *
     * @param headers List of headers in the request object
     * @param name Header name
     * @param value Header value
     */
    _replaceHeader(headers: any[]|null, name: String|null, value: String|null): void;

    /**
     * Adds/appends value of the header.
     *
     * @param headers List of headers in the request object
     * @param name Header name
     * @param value Header value
     */
    _appendHeader(headers: any[]|null, name: String|null, value: String|null): void;

    /**
     * Processes headers when all options are processed and final list of headers
     * is known.
     *
     * @param result ARC request object
     */
    _processHeadersPost(result: object|null): void;

    /**
     * Creates a URL encoded payload.
     *
     * @param value Configuration options. See cURL man page for
     * `--data-urlencode` option.
     * @param target Previously added data. Note, it won't
     * check for the data type before appening URL encoded data.
     * @returns Payload with url encoded data.
     */
    _appendUrlEncode(value: String|null, target: Stirng|null|undefined): String|null;

    /**
     * Adds `multipart` property on the target with ARC's definition of
     * a multipart object.
     * See https://github.com/advanced-rest-client/api-components-api/blob/
     * master/docs/arc-models.md#arcmultipartitem
     *
     * @param value Command value
     * @param target Request object
     */
    _appendMultipart(value: String|null, target: object|null): void;

    /**
     * Moces all payload / multipart collected data to the URL
     */
    _appendPayloadToGet(request: object|null): void;
  }
}

interface HTMLElementTagNameMap {
  "curl-request": LogicElements.CurlRequest;
}
